#!/bin/python2.7
# -*- coding: utf-8 -*-
import sys
import smbus
import RPi.GPIO as GPIO
import time
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
from pdfminer.pdfpage import PDFPage
from cStringIO import StringIO
from translate import braille_map

lettre = 0
bus = smbus.SMBus(1)
GPIO.setmode(GPIO.BCM)
GPIO.setup(21, GPIO.IN, pull_up_down=GPIO.PUD_UP)

def convert_pdf_to_txt(path):
	rsrcmgr = PDFResourceManager()
	retstr = StringIO()
	codec = 'utf-8'
	laparams = LAParams()
	device = TextConverter(rsrcmgr, retstr, codec=codec, laparams=laparams)
	fp = file(path, 'rb')
	interpreter = PDFPageInterpreter(rsrcmgr, device)
	password = ""
	maxpages = 0
	caching = True
	pagenos=set()

	for page in PDFPage.get_pages(fp, pagenos, maxpages=maxpages, password=password,caching=caching, check_extractable=True):
    	interpreter.process_page(page)

	text = retstr.getvalue()

	fp.close()
	device.close()
	retstr.close()
	return text

if __name__ == '__main__':
	# Load the file as argument
	try:
    	input_text = convert_pdf_to_txt(sys.argv[1])
	except:
    	raise Exception('No input file or input file not found')

	for line in input_text.splitlines():
    	for char in line:
        	# Unknown caracter
        	if char not in braille_map.keys():
            	continue
        	if lettre == 4:
            	#Reset avec le bouton
            	while not GPIO.input(21):
                	time.sleep(0.2)
            	lettre = 0
        	if lettre == 3:
            	lettre += 1
            	bus.write_byte_data(0x24, 0 , braille_map[char])
        	if lettre == 2:
            	lettre += 1
            	bus.write_byte_data(0x24, 1 , braille_map[char])
        	if lettre == 1:
            	lettre += 1
            	bus.write_byte_data(0x26, 1 , braille_map[char])
        	if lettre == 0:
            	lettre += 1
            	bus.write_byte_data(0x26, 0 , braille_map[char])
#        	print(braille_map[char])
#bus.write_byte_data(0x26, 0 , braille_map[char])